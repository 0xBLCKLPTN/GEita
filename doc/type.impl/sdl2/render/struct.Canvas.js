(function() {var type_impls = {
"sdl2":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Canvas%3CSurface%3C's%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/sdl2/render.rs.html#356-408\">source</a><a href=\"#impl-Canvas%3CSurface%3C's%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'s&gt; <a class=\"struct\" href=\"sdl2/render/struct.Canvas.html\" title=\"struct sdl2::render::Canvas\">Canvas</a>&lt;<a class=\"struct\" href=\"sdl2/surface/struct.Surface.html\" title=\"struct sdl2::surface::Surface\">Surface</a>&lt;'s&gt;&gt;</h3></section></summary><div class=\"docblock\"><p>Methods for the <code>SurfaceCanvas</code>.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_surface\" class=\"method\"><a class=\"src rightside\" href=\"src/sdl2/render.rs.html#362-376\">source</a><h4 class=\"code-header\">pub fn <a href=\"sdl2/render/struct.Canvas.html#tymethod.from_surface\" class=\"fn\">from_surface</a>(surface: <a class=\"struct\" href=\"sdl2/surface/struct.Surface.html\" title=\"struct sdl2::surface::Surface\">Surface</a>&lt;'s&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.78.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.78.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a 2D software rendering context for a surface.</p>\n<p>This method should only fail if SDL2 is not built with rendering\nsupport, or there’s an out-of-memory error.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.surface\" class=\"method\"><a class=\"src rightside\" href=\"src/sdl2/render.rs.html#380-382\">source</a><h4 class=\"code-header\">pub fn <a href=\"sdl2/render/struct.Canvas.html#tymethod.surface\" class=\"fn\">surface</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"sdl2/surface/struct.SurfaceRef.html\" title=\"struct sdl2::surface::SurfaceRef\">SurfaceRef</a></h4></section></summary><div class=\"docblock\"><p>Gets a reference to the associated surface of the Canvas</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.surface_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/sdl2/render.rs.html#386-388\">source</a><h4 class=\"code-header\">pub fn <a href=\"sdl2/render/struct.Canvas.html#tymethod.surface_mut\" class=\"fn\">surface_mut</a>(&amp;mut self) -&gt; &amp;mut <a class=\"struct\" href=\"sdl2/surface/struct.SurfaceRef.html\" title=\"struct sdl2::surface::SurfaceRef\">SurfaceRef</a></h4></section></summary><div class=\"docblock\"><p>Gets a mutable reference to the associated surface of the Canvas</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_surface\" class=\"method\"><a class=\"src rightside\" href=\"src/sdl2/render.rs.html#392-394\">source</a><h4 class=\"code-header\">pub fn <a href=\"sdl2/render/struct.Canvas.html#tymethod.into_surface\" class=\"fn\">into_surface</a>(self) -&gt; <a class=\"struct\" href=\"sdl2/surface/struct.Surface.html\" title=\"struct sdl2::surface::Surface\">Surface</a>&lt;'s&gt;</h4></section></summary><div class=\"docblock\"><p>Gets the associated surface of the Canvas and destroys the Canvas</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.texture_creator\" class=\"method\"><a class=\"src rightside\" href=\"src/sdl2/render.rs.html#402-407\">source</a><h4 class=\"code-header\">pub fn <a href=\"sdl2/render/struct.Canvas.html#tymethod.texture_creator\" class=\"fn\">texture_creator</a>(&amp;self) -&gt; <a class=\"struct\" href=\"sdl2/render/struct.TextureCreator.html\" title=\"struct sdl2::render::TextureCreator\">TextureCreator</a>&lt;<a class=\"struct\" href=\"sdl2/surface/struct.SurfaceContext.html\" title=\"struct sdl2::surface::SurfaceContext\">SurfaceContext</a>&lt;'s&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a <code>TextureCreator</code> that can create Textures to be drawn on this <code>Canvas</code></p>\n<p>This <code>TextureCreator</code> will share a reference to the renderer and target context.</p>\n<p>The target (i.e., <code>Window</code>) will not be destroyed and the SDL_Renderer will not be\ndestroyed if the <code>TextureCreator</code> is still in scope.</p>\n</div></details></div></details>",0,"sdl2::render::SurfaceCanvas"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Canvas%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/sdl2/render.rs.html#455-650\">source</a><a href=\"#impl-Canvas%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"sdl2/render/trait.RenderTarget.html\" title=\"trait sdl2::render::RenderTarget\">RenderTarget</a>&gt; <a class=\"struct\" href=\"sdl2/render/struct.Canvas.html\" title=\"struct sdl2::render::Canvas\">Canvas</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.render_target_supported\" class=\"method\"><a class=\"src rightside\" href=\"src/sdl2/render.rs.html#458-460\">source</a><h4 class=\"code-header\">pub fn <a href=\"sdl2/render/struct.Canvas.html#tymethod.render_target_supported\" class=\"fn\">render_target_supported</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Determine whether a window supports the use of render targets.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_texture_canvas\" class=\"method\"><a class=\"src rightside\" href=\"src/sdl2/render.rs.html#527-544\">source</a><h4 class=\"code-header\">pub fn <a href=\"sdl2/render/struct.Canvas.html#tymethod.with_texture_canvas\" class=\"fn\">with_texture_canvas</a>&lt;F&gt;(\n    &amp;mut self,\n    texture: &amp;mut <a class=\"struct\" href=\"sdl2/render/struct.Texture.html\" title=\"struct sdl2::render::Texture\">Texture</a>&lt;'_&gt;,\n    f: F\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.78.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.unit.html\">()</a>, <a class=\"enum\" href=\"sdl2/render/enum.TargetRenderError.html\" title=\"enum sdl2::render::TargetRenderError\">TargetRenderError</a>&gt;<div class=\"where\">where\n    for&lt;'r&gt; F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(&amp;'r mut <a class=\"struct\" href=\"sdl2/render/struct.Canvas.html\" title=\"struct sdl2::render::Canvas\">Canvas</a>&lt;T&gt;),</div></h4></section></summary><div class=\"docblock\"><p>Temporarily sets the target of <code>Canvas</code> to a <code>Texture</code>. This effectively allows rendering\nto a <code>Texture</code> in any way you want: you can make a <code>Texture</code> a combination of other\n<code>Texture</code>s, be a complex geometry form with the <code>gfx</code> module, … You can draw pixel by\npixel in it if you want, so you can do basically anything with that <code>Texture</code>.</p>\n<p>If you want to set the content of multiple <code>Texture</code> at once the most efficient way\npossible, <em>don’t</em> make a loop and call this function every time and use\n<code>with_multiple_texture_canvas</code> instead. Using <code>with_texture_canvas</code> is actually\ninefficient because the target is reset to the source (the <code>Window</code> or the <code>Surface</code>)\nat the end of this function, but using it in a loop would make this reset useless.\nPlus, the check that render_target is actually supported on that <code>Canvas</code> is also\ndone every time, leading to useless checks.</p>\n<h5 id=\"notes\"><a class=\"doc-anchor\" href=\"#notes\">§</a>Notes</h5>\n<p>Note that the <code>Canvas</code> in the closure is exactly the same as the one you call this\nfunction with, meaning that you can call every function of your original <code>Canvas</code>.</p>\n<p>That means you can also call <code>with_texture_canvas</code> and <code>with_multiple_texture_canvas</code> from\nthe inside of the closure. Even though this is useless and inefficient, this is totally\nsafe to do and allowed.</p>\n<p>Since the render target is now a Texture, some calls of Canvas might return another result\nthan if the target was to be the original source. For instance <code>output_size</code> will return\nthis size of the current <code>Texture</code> in the closure, but the size of the <code>Window</code> or\n<code>Surface</code> outside of the closure.</p>\n<p>You do not need to call <code>present</code> after drawing in the Canvas in the closure, the changes\nare applied directly to the <code>Texture</code> instead of a hidden buffer.</p>\n<h5 id=\"errors\"><a class=\"doc-anchor\" href=\"#errors\">§</a>Errors</h5>\n<ul>\n<li>returns <code>TargetRenderError::NotSupported</code>\nif the renderer does not support the use of render targets</li>\n<li>returns <code>TargetRenderError::SdlError</code> if SDL2 returned with an error code.</li>\n</ul>\n<p>The texture <em>must</em> be created with the texture access:\n<code>sdl2::render::TextureAccess::Target</code>.\nUsing a texture which was not created with the texture access <code>Target</code> is undefined\nbehavior.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>The example below changes a newly created <code>Texture</code> to be a 150-by-150 black texture with a\n50-by-50 red square in the middle.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>texture_creator = canvas.texture_creator();\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>texture = texture_creator\n    .create_texture_target(texture_creator.default_pixel_format(), <span class=\"number\">150</span>, <span class=\"number\">150</span>)\n    .unwrap();\n<span class=\"kw\">let </span>result = canvas.with_texture_canvas(<span class=\"kw-2\">&amp;mut </span>texture, |texture_canvas| {\n    texture_canvas.set_draw_color(Color::RGBA(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">255</span>));\n    texture_canvas.clear();\n    texture_canvas.set_draw_color(Color::RGBA(<span class=\"number\">255</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">255</span>));\n    texture_canvas.fill_rect(Rect::new(<span class=\"number\">50</span>, <span class=\"number\">50</span>, <span class=\"number\">50</span>, <span class=\"number\">50</span>)).unwrap();\n});</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_multiple_texture_canvas\" class=\"method\"><a class=\"src rightside\" href=\"src/sdl2/render.rs.html#603-624\">source</a><h4 class=\"code-header\">pub fn <a href=\"sdl2/render/struct.Canvas.html#tymethod.with_multiple_texture_canvas\" class=\"fn\">with_multiple_texture_canvas</a>&lt;'t: 'a, 'a: 's, 's, I, F, U: 's&gt;(\n    &amp;mut self,\n    textures: I,\n    f: F\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.78.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.unit.html\">()</a>, <a class=\"enum\" href=\"sdl2/render/enum.TargetRenderError.html\" title=\"enum sdl2::render::TargetRenderError\">TargetRenderError</a>&gt;<div class=\"where\">where\n    for&lt;'r&gt; F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(&amp;'r mut <a class=\"struct\" href=\"sdl2/render/struct.Canvas.html\" title=\"struct sdl2::render::Canvas\">Canvas</a>&lt;T&gt;, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.reference.html\">&amp;U</a>),\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = &amp;'s (&amp;'a mut <a class=\"struct\" href=\"sdl2/render/struct.Texture.html\" title=\"struct sdl2::render::Texture\">Texture</a>&lt;'t&gt;, U)&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Same as <code>with_texture_canvas</code>, but allows to change multiple <code>Texture</code>s at once with the\nleast amount of overhead. It means that between every iteration the Target is not reset to\nthe source, and that the fact that the Canvas supports render target isn’t checked every\niteration either; the check is actually only done once, at the beginning, avoiding useless\nchecks.</p>\n<p>The closure is run once for every <code>Texture</code> sent as parameter.</p>\n<p>The main changes from <code>with_texture_canvas</code> is that is takes an <code>Iterator</code> of <code>(&amp;mut Texture, U)</code>, where U is a type defined by the user. The closure takes a <code>&amp;mut Canvas</code>, and\n<code>&amp;U</code> as arguments instead of a simple <code>&amp;mut Canvas</code>. This user-defined type allows you to\nkeep track of what to do with the Canvas you have received in the closure.</p>\n<p>You will usually want to keep track of the number, a property, or anything that will allow\nyou to uniquely track this <code>Texture</code>, but it can also be an empty struct or <code>()</code> as well!</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<p>Let’s create two textures, one which will be yellow, and the other will be white</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>texture_creator = canvas.texture_creator();\n<span class=\"kw\">enum </span>TextureColor {\n    Yellow,\n    White,\n};\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>square_texture1 : Texture =\n    texture_creator.create_texture_target(<span class=\"prelude-val\">None</span>, <span class=\"number\">100</span>, <span class=\"number\">100</span>).unwrap();\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>square_texture2 : Texture =\n    texture_creator.create_texture_target(<span class=\"prelude-val\">None</span>, <span class=\"number\">100</span>, <span class=\"number\">100</span>).unwrap();\n<span class=\"kw\">let </span>textures : Vec&lt;(<span class=\"kw-2\">&amp;mut </span>Texture, TextureColor)&gt; = <span class=\"macro\">vec!</span>[\n    (<span class=\"kw-2\">&amp;mut </span>square_texture1, TextureColor::Yellow),\n    (<span class=\"kw-2\">&amp;mut </span>square_texture2, TextureColor::White)\n];\n<span class=\"kw\">let </span>result : <span class=\"prelude-ty\">Result</span>&lt;(), <span class=\"kw\">_</span>&gt; =\n    canvas.with_multiple_texture_canvas(textures.iter(), |texture_canvas, user_context| {\n    <span class=\"kw\">match </span><span class=\"kw-2\">*</span>user_context {\n        TextureColor::White =&gt; {\n            texture_canvas.set_draw_color(Color::RGB(<span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>));\n        },\n        TextureColor::Yellow =&gt; {\n            texture_canvas.set_draw_color(Color::RGB(<span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">0</span>));\n        }\n    };\n    texture_canvas.clear();\n});\n<span class=\"comment\">// square_texture1 is now Yellow and square_texture2 is now White!</span></code></pre></div>\n</div></details></div></details>",0,"sdl2::render::SurfaceCanvas","sdl2::render::WindowCanvas"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Canvas%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/sdl2/render.rs.html#978-1621\">source</a><a href=\"#impl-Canvas%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"sdl2/render/trait.RenderTarget.html\" title=\"trait sdl2::render::RenderTarget\">RenderTarget</a>&gt; <a class=\"struct\" href=\"sdl2/render/struct.Canvas.html\" title=\"struct sdl2::render::Canvas\">Canvas</a>&lt;T&gt;</h3></section></summary><div class=\"docblock\"><p>Drawing methods</p>\n</div><div class=\"impl-items\"><section id=\"method.raw\" class=\"method\"><a class=\"src rightside\" href=\"src/sdl2/render.rs.html#982-984\">source</a><h4 class=\"code-header\">pub fn <a href=\"sdl2/render/struct.Canvas.html#tymethod.raw\" class=\"fn\">raw</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.pointer.html\">*mut </a><a class=\"struct\" href=\"sdl2_sys/struct.SDL_Renderer.html\" title=\"struct sdl2_sys::SDL_Renderer\">SDL_Renderer</a></h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_draw_color\" class=\"method\"><a class=\"src rightside\" href=\"src/sdl2/render.rs.html#988-995\">source</a><h4 class=\"code-header\">pub fn <a href=\"sdl2/render/struct.Canvas.html#tymethod.set_draw_color\" class=\"fn\">set_draw_color</a>&lt;C: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"struct\" href=\"sdl2/pixels/struct.Color.html\" title=\"struct sdl2::pixels::Color\">Color</a>&gt;&gt;(&amp;mut self, color: C)</h4></section></summary><div class=\"docblock\"><p>Sets the color used for drawing operations (Rect, Line and Clear).</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.draw_color\" class=\"method\"><a class=\"src rightside\" href=\"src/sdl2/render.rs.html#999-1010\">source</a><h4 class=\"code-header\">pub fn <a href=\"sdl2/render/struct.Canvas.html#tymethod.draw_color\" class=\"fn\">draw_color</a>(&amp;self) -&gt; <a class=\"struct\" href=\"sdl2/pixels/struct.Color.html\" title=\"struct sdl2::pixels::Color\">Color</a></h4></section></summary><div class=\"docblock\"><p>Gets the color used for drawing operations (Rect, Line and Clear).</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_blend_mode\" class=\"method\"><a class=\"src rightside\" href=\"src/sdl2/render.rs.html#1014-1021\">source</a><h4 class=\"code-header\">pub fn <a href=\"sdl2/render/struct.Canvas.html#tymethod.set_blend_mode\" class=\"fn\">set_blend_mode</a>(&amp;mut self, blend: <a class=\"enum\" href=\"sdl2/render/enum.BlendMode.html\" title=\"enum sdl2::render::BlendMode\">BlendMode</a>)</h4></section></summary><div class=\"docblock\"><p>Sets the blend mode used for drawing operations (Fill and Line).</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.blend_mode\" class=\"method\"><a class=\"src rightside\" href=\"src/sdl2/render.rs.html#1025-1035\">source</a><h4 class=\"code-header\">pub fn <a href=\"sdl2/render/struct.Canvas.html#tymethod.blend_mode\" class=\"fn\">blend_mode</a>(&amp;self) -&gt; <a class=\"enum\" href=\"sdl2/render/enum.BlendMode.html\" title=\"enum sdl2::render::BlendMode\">BlendMode</a></h4></section></summary><div class=\"docblock\"><p>Gets the blend mode used for drawing operations.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clear\" class=\"method\"><a class=\"src rightside\" href=\"src/sdl2/render.rs.html#1039-1044\">source</a><h4 class=\"code-header\">pub fn <a href=\"sdl2/render/struct.Canvas.html#tymethod.clear\" class=\"fn\">clear</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Clears the current rendering target with the drawing color.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.present\" class=\"method\"><a class=\"src rightside\" href=\"src/sdl2/render.rs.html#1054-1056\">source</a><h4 class=\"code-header\">pub fn <a href=\"sdl2/render/struct.Canvas.html#tymethod.present\" class=\"fn\">present</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Updates the screen with any rendering performed since the previous call.</p>\n<p>SDL’s rendering functions operate on a backbuffer; that is, calling a\nrendering function such as <code>draw_line()</code> does not directly put a line on\nthe screen, but rather updates the backbuffer.\nAs such, you compose your entire scene and present the composed\nbackbuffer to the screen as a complete picture.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.output_size\" class=\"method\"><a class=\"src rightside\" href=\"src/sdl2/render.rs.html#1060-1072\">source</a><h4 class=\"code-header\">pub fn <a href=\"sdl2/render/struct.Canvas.html#tymethod.output_size\" class=\"fn\">output_size</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.78.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.u32.html\">u32</a>), <a class=\"struct\" href=\"https://doc.rust-lang.org/1.78.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Gets the output size of a rendering context.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_logical_size\" class=\"method\"><a class=\"src rightside\" href=\"src/sdl2/render.rs.html#1076-1085\">source</a><h4 class=\"code-header\">pub fn <a href=\"sdl2/render/struct.Canvas.html#tymethod.set_logical_size\" class=\"fn\">set_logical_size</a>(\n    &amp;mut self,\n    width: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.u32.html\">u32</a>,\n    height: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.u32.html\">u32</a>\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.78.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.unit.html\">()</a>, <a class=\"enum\" href=\"sdl2/enum.IntegerOrSdlError.html\" title=\"enum sdl2::IntegerOrSdlError\">IntegerOrSdlError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Sets a device independent resolution for rendering.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.logical_size\" class=\"method\"><a class=\"src rightside\" href=\"src/sdl2/render.rs.html#1089-1096\">source</a><h4 class=\"code-header\">pub fn <a href=\"sdl2/render/struct.Canvas.html#tymethod.logical_size\" class=\"fn\">logical_size</a>(&amp;self) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.u32.html\">u32</a>)</h4></section></summary><div class=\"docblock\"><p>Gets device independent resolution for rendering.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_viewport\" class=\"method\"><a class=\"src rightside\" href=\"src/sdl2/render.rs.html#1100-1108\">source</a><h4 class=\"code-header\">pub fn <a href=\"sdl2/render/struct.Canvas.html#tymethod.set_viewport\" class=\"fn\">set_viewport</a>&lt;R: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.78.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"sdl2/rect/struct.Rect.html\" title=\"struct sdl2::rect::Rect\">Rect</a>&gt;&gt;&gt;(&amp;mut self, rect: R)</h4></section></summary><div class=\"docblock\"><p>Sets the drawing area for rendering on the current target.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.viewport\" class=\"method\"><a class=\"src rightside\" href=\"src/sdl2/render.rs.html#1112-1117\">source</a><h4 class=\"code-header\">pub fn <a href=\"sdl2/render/struct.Canvas.html#tymethod.viewport\" class=\"fn\">viewport</a>(&amp;self) -&gt; <a class=\"struct\" href=\"sdl2/rect/struct.Rect.html\" title=\"struct sdl2::rect::Rect\">Rect</a></h4></section></summary><div class=\"docblock\"><p>Gets the drawing area for the current target.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_clip_rect\" class=\"method\"><a class=\"src rightside\" href=\"src/sdl2/render.rs.html#1123-1131\">source</a><h4 class=\"code-header\">pub fn <a href=\"sdl2/render/struct.Canvas.html#tymethod.set_clip_rect\" class=\"fn\">set_clip_rect</a>&lt;R: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.78.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"sdl2/rect/struct.Rect.html\" title=\"struct sdl2::rect::Rect\">Rect</a>&gt;&gt;&gt;(&amp;mut self, rect: R)</h4></section></summary><div class=\"docblock\"><p>Sets the clip rectangle for rendering on the specified target.</p>\n<p>If the rectangle is <code>None</code>, clipping will be disabled.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clip_rect\" class=\"method\"><a class=\"src rightside\" href=\"src/sdl2/render.rs.html#1137-1146\">source</a><h4 class=\"code-header\">pub fn <a href=\"sdl2/render/struct.Canvas.html#tymethod.clip_rect\" class=\"fn\">clip_rect</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.78.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"sdl2/rect/struct.Rect.html\" title=\"struct sdl2::rect::Rect\">Rect</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Gets the clip rectangle for the current target.</p>\n<p>Returns <code>None</code> if clipping is disabled.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_integer_scale\" class=\"method\"><a class=\"src rightside\" href=\"src/sdl2/render.rs.html#1150-1166\">source</a><h4 class=\"code-header\">pub fn <a href=\"sdl2/render/struct.Canvas.html#tymethod.set_integer_scale\" class=\"fn\">set_integer_scale</a>(&amp;mut self, scale: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.bool.html\">bool</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.78.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.78.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Sets whether to force integer scales for resolution-independent rendering.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.integer_scale\" class=\"method\"><a class=\"src rightside\" href=\"src/sdl2/render.rs.html#1170-1172\">source</a><h4 class=\"code-header\">pub fn <a href=\"sdl2/render/struct.Canvas.html#tymethod.integer_scale\" class=\"fn\">integer_scale</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Gets whether integer scales are forced for resolution-independent rendering.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_scale\" class=\"method\"><a class=\"src rightside\" href=\"src/sdl2/render.rs.html#1176-1184\">source</a><h4 class=\"code-header\">pub fn <a href=\"sdl2/render/struct.Canvas.html#tymethod.set_scale\" class=\"fn\">set_scale</a>(&amp;mut self, scale_x: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.f32.html\">f32</a>, scale_y: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.f32.html\">f32</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.78.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.78.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Sets the drawing scale for rendering on the current target.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.scale\" class=\"method\"><a class=\"src rightside\" href=\"src/sdl2/render.rs.html#1188-1193\">source</a><h4 class=\"code-header\">pub fn <a href=\"sdl2/render/struct.Canvas.html#tymethod.scale\" class=\"fn\">scale</a>(&amp;self) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.f32.html\">f32</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.f32.html\">f32</a>)</h4></section></summary><div class=\"docblock\"><p>Gets the drawing scale for the current target.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.draw_point\" class=\"method\"><a class=\"src rightside\" href=\"src/sdl2/render.rs.html#1198-1206\">source</a><h4 class=\"code-header\">pub fn <a href=\"sdl2/render/struct.Canvas.html#tymethod.draw_point\" class=\"fn\">draw_point</a>&lt;P: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"struct\" href=\"sdl2/rect/struct.Point.html\" title=\"struct sdl2::rect::Point\">Point</a>&gt;&gt;(&amp;mut self, point: P) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.78.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.78.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Draws a point on the current rendering target.\nErrors if drawing fails for any reason (e.g. driver failure)</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.draw_points\" class=\"method\"><a class=\"src rightside\" href=\"src/sdl2/render.rs.html#1211-1225\">source</a><h4 class=\"code-header\">pub fn <a href=\"sdl2/render/struct.Canvas.html#tymethod.draw_points\" class=\"fn\">draw_points</a>&lt;'a, P: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;&amp;'a [<a class=\"struct\" href=\"sdl2/rect/struct.Point.html\" title=\"struct sdl2::rect::Point\">Point</a>]&gt;&gt;(\n    &amp;mut self,\n    points: P\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.78.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.78.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Draws multiple points on the current rendering target.\nErrors if drawing fails for any reason (e.g. driver failure)</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.draw_line\" class=\"method\"><a class=\"src rightside\" href=\"src/sdl2/render.rs.html#1230-1245\">source</a><h4 class=\"code-header\">pub fn <a href=\"sdl2/render/struct.Canvas.html#tymethod.draw_line\" class=\"fn\">draw_line</a>&lt;P1: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"struct\" href=\"sdl2/rect/struct.Point.html\" title=\"struct sdl2::rect::Point\">Point</a>&gt;, P2: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"struct\" href=\"sdl2/rect/struct.Point.html\" title=\"struct sdl2::rect::Point\">Point</a>&gt;&gt;(\n    &amp;mut self,\n    start: P1,\n    end: P2\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.78.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.78.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Draws a line on the current rendering target.\nErrors if drawing fails for any reason (e.g. driver failure)</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.draw_lines\" class=\"method\"><a class=\"src rightside\" href=\"src/sdl2/render.rs.html#1250-1264\">source</a><h4 class=\"code-header\">pub fn <a href=\"sdl2/render/struct.Canvas.html#tymethod.draw_lines\" class=\"fn\">draw_lines</a>&lt;'a, P: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;&amp;'a [<a class=\"struct\" href=\"sdl2/rect/struct.Point.html\" title=\"struct sdl2::rect::Point\">Point</a>]&gt;&gt;(\n    &amp;mut self,\n    points: P\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.78.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.78.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Draws a series of connected lines on the current rendering target.\nErrors if drawing fails for any reason (e.g. driver failure)</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.draw_rect\" class=\"method\"><a class=\"src rightside\" href=\"src/sdl2/render.rs.html#1269-1276\">source</a><h4 class=\"code-header\">pub fn <a href=\"sdl2/render/struct.Canvas.html#tymethod.draw_rect\" class=\"fn\">draw_rect</a>(&amp;mut self, rect: <a class=\"struct\" href=\"sdl2/rect/struct.Rect.html\" title=\"struct sdl2::rect::Rect\">Rect</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.78.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.78.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Draws a rectangle on the current rendering target.\nErrors if drawing fails for any reason (e.g. driver failure)</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.draw_rects\" class=\"method\"><a class=\"src rightside\" href=\"src/sdl2/render.rs.html#1281-1294\">source</a><h4 class=\"code-header\">pub fn <a href=\"sdl2/render/struct.Canvas.html#tymethod.draw_rects\" class=\"fn\">draw_rects</a>(&amp;mut self, rects: &amp;[<a class=\"struct\" href=\"sdl2/rect/struct.Rect.html\" title=\"struct sdl2::rect::Rect\">Rect</a>]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.78.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.78.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Draws some number of rectangles on the current rendering target.\nErrors if drawing fails for any reason (e.g. driver failure)</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.fill_rect\" class=\"method\"><a class=\"src rightside\" href=\"src/sdl2/render.rs.html#1301-1313\">source</a><h4 class=\"code-header\">pub fn <a href=\"sdl2/render/struct.Canvas.html#tymethod.fill_rect\" class=\"fn\">fill_rect</a>&lt;R: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.78.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"sdl2/rect/struct.Rect.html\" title=\"struct sdl2::rect::Rect\">Rect</a>&gt;&gt;&gt;(\n    &amp;mut self,\n    rect: R\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.78.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.78.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Fills a rectangle on the current rendering target with the drawing\ncolor.\nPassing None will fill the entire rendering target.\nErrors if drawing fails for any reason (e.g. driver failure)</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.fill_rects\" class=\"method\"><a class=\"src rightside\" href=\"src/sdl2/render.rs.html#1319-1332\">source</a><h4 class=\"code-header\">pub fn <a href=\"sdl2/render/struct.Canvas.html#tymethod.fill_rects\" class=\"fn\">fill_rects</a>(&amp;mut self, rects: &amp;[<a class=\"struct\" href=\"sdl2/rect/struct.Rect.html\" title=\"struct sdl2::rect::Rect\">Rect</a>]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.78.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.78.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Fills some number of rectangles on the current rendering target with\nthe drawing color.\nErrors if drawing fails for any reason (e.g. driver failure)</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.copy\" class=\"method\"><a class=\"src rightside\" href=\"src/sdl2/render.rs.html#1343-1368\">source</a><h4 class=\"code-header\">pub fn <a href=\"sdl2/render/struct.Canvas.html#tymethod.copy\" class=\"fn\">copy</a>&lt;R1, R2&gt;(\n    &amp;mut self,\n    texture: &amp;<a class=\"struct\" href=\"sdl2/render/struct.Texture.html\" title=\"struct sdl2::render::Texture\">Texture</a>&lt;'_&gt;,\n    src: R1,\n    dst: R2\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.78.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.78.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt;<div class=\"where\">where\n    R1: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.78.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"sdl2/rect/struct.Rect.html\" title=\"struct sdl2::rect::Rect\">Rect</a>&gt;&gt;,\n    R2: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.78.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"sdl2/rect/struct.Rect.html\" title=\"struct sdl2::rect::Rect\">Rect</a>&gt;&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Copies a portion of the texture to the current rendering target.</p>\n<ul>\n<li>If <code>src</code> is <code>None</code>, the entire texture is copied.</li>\n<li>If <code>dst</code> is <code>None</code>, the texture will be stretched to fill the given\nrectangle.</li>\n</ul>\n<p>Errors if drawing fails for any reason (e.g. driver failure),\nor if the provided texture does not belong to the renderer.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.copy_ex\" class=\"method\"><a class=\"src rightside\" href=\"src/sdl2/render.rs.html#1384-1438\">source</a><h4 class=\"code-header\">pub fn <a href=\"sdl2/render/struct.Canvas.html#tymethod.copy_ex\" class=\"fn\">copy_ex</a>&lt;R1, R2, P&gt;(\n    &amp;mut self,\n    texture: &amp;<a class=\"struct\" href=\"sdl2/render/struct.Texture.html\" title=\"struct sdl2::render::Texture\">Texture</a>&lt;'_&gt;,\n    src: R1,\n    dst: R2,\n    angle: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.f64.html\">f64</a>,\n    center: P,\n    flip_horizontal: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.bool.html\">bool</a>,\n    flip_vertical: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.bool.html\">bool</a>\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.78.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.78.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt;<div class=\"where\">where\n    R1: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.78.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"sdl2/rect/struct.Rect.html\" title=\"struct sdl2::rect::Rect\">Rect</a>&gt;&gt;,\n    R2: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.78.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"sdl2/rect/struct.Rect.html\" title=\"struct sdl2::rect::Rect\">Rect</a>&gt;&gt;,\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.78.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"sdl2/rect/struct.Point.html\" title=\"struct sdl2::rect::Point\">Point</a>&gt;&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Copies a portion of the texture to the current rendering target,\noptionally rotating it by angle around the given center and also\nflipping it top-bottom and/or left-right.</p>\n<ul>\n<li>If <code>src</code> is <code>None</code>, the entire texture is copied.</li>\n<li>If <code>dst</code> is <code>None</code>, the texture will be stretched to fill the given\nrectangle.</li>\n<li>If <code>center</code> is <code>None</code>, rotation will be done around the center point\nof <code>dst</code>, or <code>src</code> if <code>dst</code> is None.</li>\n</ul>\n<p>Errors if drawing fails for any reason (e.g. driver failure),\nif the provided texture does not belong to the renderer,\nor if the driver does not support RenderCopyEx.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.read_pixels\" class=\"method\"><a class=\"src rightside\" href=\"src/sdl2/render.rs.html#1444-1481\">source</a><h4 class=\"code-header\">pub fn <a href=\"sdl2/render/struct.Canvas.html#tymethod.read_pixels\" class=\"fn\">read_pixels</a>&lt;R: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.78.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"sdl2/rect/struct.Rect.html\" title=\"struct sdl2::rect::Rect\">Rect</a>&gt;&gt;&gt;(\n    &amp;self,\n    rect: R,\n    format: <a class=\"enum\" href=\"sdl2/pixels/enum.PixelFormatEnum.html\" title=\"enum sdl2::pixels::PixelFormatEnum\">PixelFormatEnum</a>\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.78.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.78.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.u8.html\">u8</a>&gt;, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.78.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Reads pixels from the current rendering target.</p>\n<h5 id=\"remarks\"><a class=\"doc-anchor\" href=\"#remarks\">§</a>Remarks</h5>\n<p>WARNING: This is a very slow operation, and should not be used frequently.</p>\n</div></details><section id=\"method.render_flush\" class=\"method\"><a class=\"src rightside\" href=\"src/sdl2/render.rs.html#1614-1620\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"sdl2/render/struct.Canvas.html#tymethod.render_flush\" class=\"fn\">render_flush</a>(&amp;self)</h4></section></div></details>",0,"sdl2::render::SurfaceCanvas","sdl2::render::WindowCanvas"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Canvas%3CWindow%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/sdl2/render.rs.html#417-453\">source</a><a href=\"#impl-Canvas%3CWindow%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"sdl2/render/struct.Canvas.html\" title=\"struct sdl2::render::Canvas\">Canvas</a>&lt;<a class=\"struct\" href=\"sdl2/video/struct.Window.html\" title=\"struct sdl2::video::Window\">Window</a>&gt;</h3></section></summary><div class=\"docblock\"><p>Methods for the <code>WindowCanvas</code>.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.window\" class=\"method\"><a class=\"src rightside\" href=\"src/sdl2/render.rs.html#420-422\">source</a><h4 class=\"code-header\">pub fn <a href=\"sdl2/render/struct.Canvas.html#tymethod.window\" class=\"fn\">window</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"sdl2/video/struct.Window.html\" title=\"struct sdl2::video::Window\">Window</a></h4></section></summary><div class=\"docblock\"><p>Gets a reference to the associated window of the Canvas</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.window_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/sdl2/render.rs.html#426-428\">source</a><h4 class=\"code-header\">pub fn <a href=\"sdl2/render/struct.Canvas.html#tymethod.window_mut\" class=\"fn\">window_mut</a>(&amp;mut self) -&gt; &amp;mut <a class=\"struct\" href=\"sdl2/video/struct.Window.html\" title=\"struct sdl2::video::Window\">Window</a></h4></section></summary><div class=\"docblock\"><p>Gets a mutable reference to the associated window of the Canvas</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_window\" class=\"method\"><a class=\"src rightside\" href=\"src/sdl2/render.rs.html#432-434\">source</a><h4 class=\"code-header\">pub fn <a href=\"sdl2/render/struct.Canvas.html#tymethod.into_window\" class=\"fn\">into_window</a>(self) -&gt; <a class=\"struct\" href=\"sdl2/video/struct.Window.html\" title=\"struct sdl2::video::Window\">Window</a></h4></section></summary><div class=\"docblock\"><p>Gets the associated window of the Canvas and destroys the Canvas</p>\n</div></details><section id=\"method.default_pixel_format\" class=\"method\"><a class=\"src rightside\" href=\"src/sdl2/render.rs.html#437-439\">source</a><h4 class=\"code-header\">pub fn <a href=\"sdl2/render/struct.Canvas.html#tymethod.default_pixel_format\" class=\"fn\">default_pixel_format</a>(&amp;self) -&gt; <a class=\"enum\" href=\"sdl2/pixels/enum.PixelFormatEnum.html\" title=\"enum sdl2::pixels::PixelFormatEnum\">PixelFormatEnum</a></h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.texture_creator\" class=\"method\"><a class=\"src rightside\" href=\"src/sdl2/render.rs.html#447-452\">source</a><h4 class=\"code-header\">pub fn <a href=\"sdl2/render/struct.Canvas.html#tymethod.texture_creator\" class=\"fn\">texture_creator</a>(&amp;self) -&gt; <a class=\"struct\" href=\"sdl2/render/struct.TextureCreator.html\" title=\"struct sdl2::render::TextureCreator\">TextureCreator</a>&lt;<a class=\"struct\" href=\"sdl2/video/struct.WindowContext.html\" title=\"struct sdl2::video::WindowContext\">WindowContext</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a <code>TextureCreator</code> that can create Textures to be drawn on this <code>Canvas</code></p>\n<p>This <code>TextureCreator</code> will share a reference to the renderer and target context.</p>\n<p>The target (i.e., <code>Window</code>) will not be destroyed and the SDL_Renderer will not be\ndestroyed if the <code>TextureCreator</code> is still in scope.</p>\n</div></details></div></details>",0,"sdl2::render::WindowCanvas"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-__Deref-for-Canvas%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/sdl2/render.rs.html#270-276\">source</a><a href=\"#impl-__Deref-for-Canvas%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"sdl2/render/trait.RenderTarget.html\" title=\"trait sdl2::render::RenderTarget\">RenderTarget</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a> for <a class=\"struct\" href=\"sdl2/render/struct.Canvas.html\" title=\"struct sdl2::render::Canvas\">Canvas</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Target\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Target\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.78.0/core/ops/deref/trait.Deref.html#associatedtype.Target\" class=\"associatedtype\">Target</a> = <a class=\"struct\" href=\"sdl2/render/struct.RendererContext.html\" title=\"struct sdl2::render::RendererContext\">RendererContext</a>&lt;&lt;T as <a class=\"trait\" href=\"sdl2/render/trait.RenderTarget.html\" title=\"trait sdl2::render::RenderTarget\">RenderTarget</a>&gt;::<a class=\"associatedtype\" href=\"sdl2/render/trait.RenderTarget.html#associatedtype.Context\" title=\"type sdl2::render::RenderTarget::Context\">Context</a>&gt;</h4></section></summary><div class='docblock'>The resulting type after dereferencing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.deref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/sdl2/render.rs.html#273-275\">source</a><a href=\"#method.deref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.78.0/core/ops/deref/trait.Deref.html#tymethod.deref\" class=\"fn\">deref</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"sdl2/render/struct.RendererContext.html\" title=\"struct sdl2::render::RendererContext\">RendererContext</a>&lt;T::<a class=\"associatedtype\" href=\"sdl2/render/trait.RenderTarget.html#associatedtype.Context\" title=\"type sdl2::render::RenderTarget::Context\">Context</a>&gt;</h4></section></summary><div class='docblock'>Dereferences the value.</div></details></div></details>","Deref","sdl2::render::SurfaceCanvas","sdl2::render::WindowCanvas"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()